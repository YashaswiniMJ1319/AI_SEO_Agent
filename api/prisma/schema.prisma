generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//
// üßë‚Äçüíª USERS & ROLES
//
model User {
  id          String      @id @default(uuid())
  email       String      @unique
  phone     String   @unique
  password    String
  fullName    String?
  roleId      String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  role        Role        @relation(fields: [roleId], references: [id])
  projects    Project[]   @relation("UserProjects")
  analyses    Analysis[]  @relation("UserAnalyses")
}

model Role {
  id     String  @id @default(uuid())
  name   String  @unique
  users  User[]
}

//
// üìà SEO PROJECTS
//
model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?
  userId        String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user          User           @relation("UserProjects", fields: [userId], references: [id])
  keywords      Keyword[]
  analyses      Analysis[]
}

//
// üîç KEYWORDS
//
model Keyword {
  id          String    @id @default(uuid())
  projectId   String
  keyword     String
  searchVolume Int?
  competition Float?
  createdAt   DateTime  @default(now())

  project     Project   @relation(fields: [projectId], references: [id])
}

//
// üß† ANALYSIS RESULTS
//
model Analysis {
  id            String         @id @default(uuid())
  userId        String
  projectId     String?
  content       String
  wordCount     Int
  readability   String
  seoScore      Int
  keywordDensity Json
  createdAt     DateTime       @default(now())

  user          User           @relation("UserAnalyses", fields: [userId], references: [id])
  project       Project?       @relation(fields: [projectId], references: [id])
  suggestions   Suggestion[]
}

//
// üí° SEO SUGGESTIONS
//
model Suggestion {
  id          String   @id @default(uuid())
  analysisId  String
  text        String
  createdAt   DateTime @default(now())

  analysis    Analysis @relation(fields: [analysisId], references: [id])
}

//
// üßæ AUDIT LOGS
//
model AuditLog {
  id         String   @id @default(uuid())
  entity     String
  entityId   String
  action     String
  meta       Json?
  createdAt  DateTime @default(now())
}
